apiVersion: v1
kind: Namespace
metadata:
  name: observability
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: otel-collector
  namespace: observability
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: otel-collector
rules:
  - apiGroups: [""]
    resources: ["nodes", "nodes/stats", "pods", "namespaces", "endpoints"]
    verbs: ["get", "list", "watch"]
  - nonResourceURLs: ["/metrics", "/metrics/cadvisor", "/metrics/resource", "/stats", "/stats/summary"]
    verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: otel-collector
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: otel-collector
subjects:
  - kind: ServiceAccount
    name: otel-collector
    namespace: observability
---
apiVersion: v1
kind: Service
metadata:
  name: otel-collector
  namespace: observability
spec:
  selector:
    app.kubernetes.io/name: otel-collector
  ports:
    - name: prom-metrics
      port: 8889
      targetPort: 8889
---
apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: otel-collector
  namespace: observability
spec:
  serviceAccount: otel-collector
  image: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib:0.132.0
  mode: deployment
  env:
    - name: KUBELET_HOST
      valueFrom:
        fieldRef:
          fieldPath: status.hostIP

  config:
    receivers:
      # Receive traces/metrics/logs from apps
      otlp:
        protocols:
          grpc: {}
          http: {}

      # Collector self-metrics
      prometheus/self:
        config:
          scrape_configs:
            - job_name: 'otel-collector'
              scrape_interval: 10s
              static_configs:
                - targets: ['0.0.0.0:8888']

      # Kubernetes cluster-level counts (nodes, pods, namespaces)
      k8s_cluster:
        collection_interval: 30s

      # events (create/update/delete)
      k8s_events:
        auth_type: serviceAccount

      # Node/pod/container metrics from kubelet
      kubeletstats:
        collection_interval: 30s
        auth_type: serviceAccount
        endpoint: "https://${KUBELET_HOST}:10250"
        insecure_skip_verify: true

    exporters:
      prometheus/export:
        endpoint: "0.0.0.0:8889"
      otlp/jaeger:
        endpoint: simplest-collector.observability.svc.cluster.local:4317
        tls:
          insecure: true
      debug: {}

    connectors:
      spanmetrics:
        histogram:
          explicit:
            buckets: [100us, 1ms, 2ms, 6ms, 10ms, 100ms, 250ms, 500ms, 1s, 2s, 6s, 10s]
        dimensions:
          - name: http.method
          - name: http.status_code
        exemplars:
          enabled: true
        aggregation_temporality: "AGGREGATION_TEMPORALITY_CUMULATIVE"
        metrics_flush_interval: 15s
        metrics_expiration: 5m

    service:
      pipelines:
        traces:
          receivers: [otlp]
          exporters: [otlp/jaeger, spanmetrics]

        metrics:
          receivers: [prometheus/self, spanmetrics, k8s_cluster, kubeletstats]
          exporters: [prometheus/export, debug]

        logs:
          receivers: [k8s_events]
          exporters: [debug]  

    telemetry:
      metrics:
        address: 0.0.0.0:8888
